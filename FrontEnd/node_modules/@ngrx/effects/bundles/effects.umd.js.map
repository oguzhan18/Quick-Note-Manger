{"version":3,"file":"effects.umd.js","sources":["../../../modules/effects/src/util.ts","../../../modules/effects/src/effects_module.ts","../../../modules/effects/src/effects_feature_module.ts","../../../modules/effects/src/effects_root_module.ts","../../../modules/effects/src/effects_runner.ts","../../../modules/effects/src/effect_sources.ts","../../../modules/effects/src/error_reporter.ts","../../../modules/effects/src/tokens.ts","../../../modules/effects/src/effect_notification.ts","../../../modules/effects/src/actions.ts","../../../modules/effects/src/effects_resolver.ts","../../../modules/effects/src/on_run_effects.ts","../../../modules/effects/src/effects_metadata.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\n/**\n * @deprecated Since version 4.1. Will be deleted in version 5.0.\n * @param {?} action\n * @return {?}\n */\nexport function toPayload(action: Action): any {\n  return ( /** @type {?} */((action as any))).payload;\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS, CONSOLE } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectsModule {\n/**\n * @param {?} featureEffects\n * @return {?}\n */\nstatic forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n/**\n * @param {?} rootEffects\n * @return {?}\n */\nstatic forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        ErrorReporter,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n        {\n          provide: CONSOLE,\n          useFactory: getConsole,\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EffectsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsModule.ctorParameters;\n}\n\n/**\n * @param {...?} instances\n * @return {?}\n */\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n/**\n * @return {?}\n */\nexport function getConsole() {\n  return console;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\nexport class EffectsFeatureModule {\n/**\n * @param {?} root\n * @param {?} effectSourceGroups\n * @param {?} storeModule\n */\nconstructor(\nprivate root: EffectsRootModule,\n     effectSourceGroups: any[][],\n     storeModule: StoreModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectsRootModule, },\n{type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS, ] }, ]},\n{type: StoreModule, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction EffectsFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsFeatureModule.ctorParameters;\n/** @type {?} */\nEffectsFeatureModule.prototype.root;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreModule, Store } from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const /** @type {?} */ ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nexport class EffectsRootModule {\n/**\n * @param {?} sources\n * @param {?} runner\n * @param {?} store\n * @param {?} rootEffects\n * @param {?} storeModule\n */\nconstructor(\nprivate sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n     rootEffects: any[],\n     storeModule: StoreModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: EffectsRunner, },\n{type: Store, },\n{type: Array, decorators: [{ type: Inject, args: [ROOT_EFFECTS, ] }, ]},\n{type: StoreModule, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction EffectsRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRootModule.ctorParameters;\n/** @type {?} */\nEffectsRootModule.prototype.sources;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Subscription } from 'rxjs/Subscription';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EffectSources } from './effect_sources';\nexport class EffectsRunner implements OnDestroy {\nprivate effectsSubscription: Subscription | null = null;\n/**\n * @param {?} effectSources\n * @param {?} store\n */\nconstructor(\nprivate effectSources: EffectSources,\nprivate store: Store<any>\n  ) {}\n/**\n * @return {?}\n */\nstart() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: Store, },\n];\n}\n\nfunction EffectsRunner_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRunner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRunner.ctorParameters;\n/** @type {?} */\nEffectsRunner.prototype.effectsSubscription;\n/** @type {?} */\nEffectsRunner.prototype.effectSources;\n/** @type {?} */\nEffectsRunner.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { groupBy, GroupedObservable } from 'rxjs/operator/groupBy';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { exhaustMap } from 'rxjs/operator/exhaustMap';\nimport { map } from 'rxjs/operator/map';\nimport { dematerialize } from 'rxjs/operator/dematerialize';\nimport { filter } from 'rxjs/operator/filter';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Notification } from 'rxjs/Notification';\nimport { Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification, verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectSources extends Subject<any> {\n/**\n * @param {?} errorReporter\n */\nconstructor(private errorReporter: ErrorReporter) {\n    super();\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n/**\n * @return {?}\n */\ntoActions(): Observable<Action> {\n    return mergeMap.call(\n      groupBy.call(this, getSourceForInstance),\n      (source$: GroupedObservable<any, any>) =>\n        dematerialize.call(\n          filter.call(\n            map.call(\n              exhaustMap.call(source$, resolveEffectSource),\n              (output: EffectNotification) => {\n                verifyOutput(output, this.errorReporter);\n\n                return output.notification;\n              }\n            ),\n            (notification: Notification<any>) => notification.kind === 'N'\n          )\n        )\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ErrorReporter, },\n];\n}\n\nfunction EffectSources_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectSources.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectSources.ctorParameters;\n/** @type {?} */\nEffectSources.prototype.errorReporter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { CONSOLE } from './tokens';\nexport class ErrorReporter {\n/**\n * @param {?} console\n */\nconstructor(\nprivate console: any) {}\n/**\n * @param {?} reason\n * @param {?} details\n * @return {?}\n */\nreport(reason: string, details: any): void {\n    this.console.group(reason);\n\n    for (let /** @type {?} */ key in details) {\n      this.console.error(`${key}:`, details[key]);\n    }\n\n    this.console.groupEnd();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONSOLE, ] }, ]},\n];\n}\n\nfunction ErrorReporter_tsickle_Closure_declarations() {\n/** @type {?} */\nErrorReporter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nErrorReporter.ctorParameters;\n/** @type {?} */\nErrorReporter.prototype.console;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const /** @type {?} */ IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const /** @type {?} */ ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const /** @type {?} */ FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\nexport const /** @type {?} */ CONSOLE = new InjectionToken<Console>('Browser Console');\n","import { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { ErrorReporter } from './error_reporter';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportErrorThrown(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  if (output.notification.kind === 'E') {\n    const /** @type {?} */ errorReason = `Effect ${getEffectName(output)} threw an error`;\n\n    reporter.report(errorReason, {\n      Source: output.sourceInstance,\n      Effect: output.effect,\n      Error: output.notification.error,\n      Notification: output.notification,\n    });\n  }\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  if (output.notification.kind === 'N') {\n    const /** @type {?} */ action = output.notification.value;\n    const /** @type {?} */ isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      const /** @type {?} */ errorReason = `Effect ${getEffectName(\n        output\n      )} dispatched an invalid action`;\n\n      reporter.report(errorReason, {\n        Source: output.sourceInstance,\n        Effect: output.effect,\n        Dispatched: action,\n        Notification: output.notification,\n      });\n    }\n  }\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const /** @type {?} */ isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operator/filter';\nexport class Actions<V = Action> extends Observable<V> {\n/**\n * @param {?=} source\n */\nconstructor( source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<V, R>): Observable<R> {\n    const /** @type {?} */ observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n/**\n * @template V2\n * @param {...?} allowedTypes\n * @return {?}\n */\nofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2> {\n    return filter.call(this, (action: Action) =>\n      allowedTypes.some(type => type === action.type)\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Observable, decorators: [{ type: Inject, args: [ScannedActionsSubject, ] }, ]},\n];\n}\n\nfunction Actions_tsickle_Closure_declarations() {\n/** @type {?} */\nActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { materialize } from 'rxjs/operator/materialize';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata, getSourceForInstance } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const /** @type {?} */ sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const /** @type {?} */ observables: Observable<any>[] = getSourceMetadata(\n    sourceInstance\n  ).map(({ propertyName, dispatch }): Observable<EffectNotification> => {\n    const /** @type {?} */ observable: Observable<any> =\n      typeof sourceInstance[propertyName] === 'function'\n        ? sourceInstance[propertyName]()\n        : sourceInstance[propertyName];\n\n    if (dispatch === false) {\n      return ignoreElements.call(observable);\n    }\n\n    const /** @type {?} */ materialized$ = materialize.call(observable);\n\n    return map.call(\n      materialized$,\n      (notification: Notification<Action>): EffectNotification => ({\n        effect: sourceInstance[propertyName],\n        notification,\n        propertyName,\n        sourceName,\n        sourceInstance,\n      })\n    );\n  });\n\n  return merge(...observables);\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function resolveEffectSource(sourceInstance: any) {\n  const /** @type {?} */ mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { getSourceForInstance } from './effects_metadata';\nimport { EffectNotification } from './effect_notification';\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>\n  ): Observable<EffectNotification>;\n}\n\nconst /** @type {?} */ onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function isOnRunEffects(\n  sourceInstance: Object\n): sourceInstance is OnRunEffects {\n  const /** @type {?} */ source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { Observable } from 'rxjs/Observable';\nimport { compose } from '@ngrx/store';\n\nconst /** @type {?} */ METADATA_KEY = '__@ngrx/effects__';\nconst /** @type {?} */ r: any = Reflect;\n\nexport interface EffectMetadata {\n  propertyName: string;\n  dispatch: boolean;\n}\n/**\n * @param {?} sourceProto\n * @return {?}\n */\nfunction getEffectMetadataEntries(sourceProto: any): EffectMetadata[] {\n  return sourceProto.constructor[METADATA_KEY] || [];\n}\n/**\n * @param {?} sourceProto\n * @param {?} entries\n * @return {?}\n */\nfunction setEffectMetadataEntries(sourceProto: any, entries: EffectMetadata[]) {\n  const /** @type {?} */ constructor = sourceProto.constructor;\n  const /** @type {?} */ meta: EffectMetadata[] = constructor.hasOwnProperty(METADATA_KEY)\n    ? ( /** @type {?} */((constructor as any)))[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n/**\n * @param {?=} __0\n * @return {?}\n */\nexport function Effect({ dispatch } = { dispatch: true }): PropertyDecorator {\n  return function(target: any, propertyName: string) {\n    const /** @type {?} */ metadata: EffectMetadata = { propertyName, dispatch };\n    setEffectMetadataEntries(target, [metadata]);\n  };\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function getSourceForInstance(instance: Object): any {\n  return Object.getPrototypeOf(instance);\n}\n\nexport const /** @type {?} */ getSourceMetadata = compose(\n  getEffectMetadataEntries,\n  getSourceForInstance\n);\n\nexport type EffectsMetadata<T> = {\n  [key in keyof T]?:\n    | undefined\n    | {\n        dispatch: boolean;\n      }\n};\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const /** @type {?} */ metadata: EffectsMetadata<T> = {};\n\n  getSourceMetadata(instance).forEach(({ propertyName, dispatch }) => {\n    metadata[propertyName] = { dispatch };\n  });\n\n  return metadata;\n}\n"],"names":["NgModule","StoreModule","Optional","Inject","Store","store","Injectable","Subject","mergeMap","groupBy","dematerialize","filter","map","exhaustMap","InjectionToken","Observable","ScannedActionsSubject","merge","materialize","ignoreElements","compose"],"mappings":"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"}